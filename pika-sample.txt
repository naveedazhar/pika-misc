Pika is a Python library for interacting with RabbitMQ, a popular message broker. It allows you to publish and consume messages in a distributed system. Here are some basic examples of how to use Pika in Python:

1. Install Pika:

You can install Pika using pip:

bash

pip install pika

2. Connecting to RabbitMQ:

First, establish a connection to your RabbitMQ server.

python

import pika

# Establish a connection to the RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

3. Sending a Message (Producer):

You can publish a message to a specific queue.

python

# Declare a queue
channel.queue_declare(queue='hello')

# Publish a message to the queue
channel.basic_publish(exchange='', routing_key='hello', body='Hello, RabbitMQ!')
print("Sent 'Hello, RabbitMQ!'")

4. Receiving a Message (Consumer):

Consume messages from a queue.

python

# Define a callback function to handle incoming messages
def callback(ch, method, properties, body):
    print(f"Received: {body}")

# Set the callback function for the queue
channel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)

# Start consuming messages
print("Waiting for messages. To exit, press CTRL+C")
channel.start_consuming()

5. Closing the Connection:

After you're done, remember to close the connection:

python

connection.close()

6. Error Handling:

Don't forget to handle potential exceptions, such as connection issues. A more complete example would include proper error handling.

python

try:
    # Your Pika code here
except Exception as e:
    print(f"An error occurred: {e}")

These are basic examples of how to use Pika for RabbitMQ messaging. In a real-world scenario, you would typically have separate producer and consumer processes running, and you may use more advanced features like topic exchanges, message durability, and acknowledgment mechanisms. Ensure that you configure RabbitMQ properly with the necessary queues and exchanges for your specific use case.
